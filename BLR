-- https://pastefy.app/X4YPLbzz/raw //// Logs

repeat task.wait() until game:IsLoaded()

print("Kaos Hub - Loading Security;")

pcall(function()
    local antiCheatService = game:GetService("ReplicatedStorage"):WaitForChild("Packages", 5):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("AntiCheatService", 5)
    if antiCheatService then
        antiCheatService:Destroy()
        print("Kaos Hub - Loaded")
    else
        print("AC not found, skipping")
    end
end)

Tasks = {
    ["Hitbox Expander"] = "Not Added",
    ["Tp Football to Goal"] = "Not Added",
    ["Roll Cards, Goal Effects etc.."] = "Not Added",
}


-- // Services
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")
local ball = workspace:WaitForChild("Football"):WaitForChild("Hitbox")
local BallHitbox_Autofarm = workspace:WaitForChild("Football"):WaitForChild("Hitbox")
local Ball_AutoFarm = workspace.Football
local enemyGoal = Workspace.Goals.Home
local myGoal = Workspace.Goals.Away
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local football = workspace:WaitForChild("Football")
local TeamSelection = "Home" 
local EnemyGoal = Workspace.Goals.Away
local HomeGoal = Workspace.Goals.Home
local playerESPEnabled = false
local ballESPEnabled = false
local tracersEnabled = false
local enableShootPower = false 
local lp = game:GetService("Players").LocalPlayer
local NewLobby = Workspace:WaitForChild("NewLobby")
local Union = game:GetService("Workspace").NewLobby.NewFixed.Structural.Floor.Foundation.Part
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

local NotificationHolder = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Module.Lua"))()
local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Client.Lua"))()

-- // Values
local selectedTweenSpeed = 0.5
local shootPowerValue = 110 
local espTextSize = 16 

local KaosX = {Utils={}}
KaosX.__index = KaosX
KaosX.Utils.__index = KaosX.Utils

local v3 = Vector3.new
local cf = CFrame.new

function KaosX.Utils.MakeUtilController(Settings)
    local Utils = {
        Tasks = {};
        Tweens = {};
        Services = {};
        States = {};
        Ints = {};
        Strings = {};
        Tables = {};
        Settings = Settings or {ConfigName = "/KaosX/KaosConfig.json"};
        LogFile = nil;
    }
    Utils.Services = setmetatable({}, {__index = function(self, service)
        if rawget(self, service) then return rawget(self, service) end
        local GotService = game:GetService(service)
        self[service] = GotService
        return self[service]
    end})
    return setmetatable(Utils, KaosX.Utils)
end

function KaosX.Utils:Log(Text)
    if self.LogFile == nil then
        local num = 0
        repeat num = num + 1 until isfile("/KaosX/Logs/KaosX_Log_" .. num .. ".txt") == false
        self.LogFile = "/KaosX/Logs/KaosX_Log_" .. num .. ".txt"
        writefile(self.LogFile, "")
    end
    appendfile(self.LogFile, Text .. "\n")
end

function KaosX.Utils:MakeFolder()
    if isfolder("KaosX") == false then 
        makefolder("KaosX")
    end
    if isfolder("/KaosX/Logs") == false then 
        makefolder("/KaosX/Logs")
    end
end

function KaosX.Utils:SaveConfig()
    local ConfigData = {Int = {}, State = {}, String = {}, Table = {}}
    for i, v in pairs(self.Ints) do
        if v.SaveValue == true then
            ConfigData.Int[i] = v.Value
        end
    end
    for i, v in pairs(self.States) do
        if v.SaveValue == true then
            ConfigData.State[i] = v.Value
        end
    end
    for i, v in pairs(self.Strings) do
        if v.SaveValue == true then
            ConfigData.String[i] = v.Value
        end
    end
    for i, v in pairs(self.Tables) do
        if v.SaveValue == true then
            ConfigData.Table[i] = v.Value
        end
    end
    local Success, Error = pcall(function()
        writefile(self.Settings.ConfigName, game:GetService("HttpService"):JSONEncode(ConfigData))
    end)
    return Success, Error
end

function KaosX.Utils:LoadConfig()
    if isfile(self.Settings.ConfigName) then
        local Config = game:GetService("HttpService"):JSONDecode(readfile(self.Settings.ConfigName))
        for key, value in pairs(Config.Int or {}) do
            self.Ints[key] = {Value = value, SaveValue = true}
        end
        for key, value in pairs(Config.State or {}) do
            self.States[key] = {Value = value, SaveValue = true}
        end
        for key, value in pairs(Config.String or {}) do
            self.Strings[key] = {Value = value, SaveValue = true}
        end
        for key, value in pairs(Config.Table or {}) do
            self.Tables[key] = {Value = value, SaveValue = true}
        end
    end
end

function KaosX.Utils:GetInt(Value)
    return self.Ints[Value] and self.Ints[Value].Value or nil
end

function KaosX.Utils:SetInt(Value, NewValue)
    if self.Ints[Value] then
        self.Ints[Value].Value = NewValue
    else
        self.Ints[Value] = {Value = NewValue, SaveValue = false}
    end
end

function KaosX.Utils:GetState(Value)
    return self.States[Value] and self.States[Value].Value or nil
end

function KaosX.Utils:SetState(Value, NewValue)
    if self.States[Value] then
        self.States[Value].Value = NewValue
    else
        self.States[Value] = {Value = NewValue, SaveValue = false}
    end
end

function KaosX.Utils:GetTable(Value)
    return self.Tables[Value] and self.Tables[Value].Value or {}
end

function KaosX.Utils:ChangeTable(TableName, Index, NewValue)
    if self.Tables[TableName] then
        self.Tables[TableName].Value[Index] = NewValue
    else
        self.Tables[TableName] = {Value = {[Index] = NewValue}, SaveValue = false}
    end
end

-- // UI
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Sristhier/Script/refs/heads/main/UI"))()
local main = Library:new{
    name = '<font color="rgb(255, 255, 255)">Kaos</font> <font color="rgb(0, 200, 200)">Hub</font>'
}

local MainTab = main:CreateTab({
    name = "Main",
    icon = "rbxassetid://18182790592"
})
local MiscTab = main:CreateTab({
    name = "Utilities",
    icon = "rbxassetid://118024518398224"
})
local PlrTab = main:CreateTab({
    name = "Player",
    icon = "rbxassetid://85363455994304"
})
local UnlocksTab = main:CreateTab({
    name = "Unlocks",
    icon = "rbxassetid://96180279630657"
})
local RollTab = main:CreateTab({
    name = "Spins",
    icon = "rbxassetid://18182794282"
})
local ESPTab = main:CreateTab({
    name = "Esp",
    icon = "rbxassetid://103616006830756"
})
local SettingsTab = main:CreateTab({
    name = "Settings",
    icon = "rbxassetid://128342900381309"
})
local CreditsTab = main:CreateTab({
    name = "Credits",
    icon = "rbxassetid://18182795417"
})


-- // Variables
getgenv().LockontoBalls = false
getgenv().TpToBall = false
getgenv().AutoAwaken_Arg = false
getgenv().AutoFlow_Arg = false 
getgenv().AutoSteal_Arg = false
getgenv().StealDistance = 10
getgenv().DribbleDistance = 5
getgenv().AutoDribble_Arg = false
getgenv().AutoC_Arg = false
getgenv().AutoV_Arg = false
getgenv().AutoB_Arg = false
getgenv().EnableStyleRoll = false
getgenv().EnableFlowRoll = false
getgenv().AutoFarmEnabled = false
getgenv().SelectedTeam = "Home"
getgenv().RedeemDaily = false 
getgenv().EnableUnlockStyle = false
getgenv().InfStamina_Arg1 = false
getgenv().RedeemCodes = false
getgenv().TeleportToBall_Arg1 = false
getgenv().HeadSize = 15
getgenv().Enabled = false
getgenv().AFK_AutoFarmEnabled = false
getgenv().autoTPBall = false 
getgenv().teleportDelay = 0.1 
getgenv().AFK_AutoFarmActive = false 

local away_coords = Vector3.new(-243.20, 11.17, -49.69)
local home_coords = Vector3.new(320.04, 11.17, -46.46)

local Codes = {
    "500KLikes",
    "700KLIKES",
    "600KCRAZY",
    "ITOSHIBROTHERS",
    "400KLIKES",
    "GAGAMARU",
    "300KLIKES",
    "250KLIKES",
    "200CRAZY",
    "150KWOW",
    "100KLIKES",
    "70KLIKES",
    "800KLIKES",
    "900KLIKES",
    "1MLIKES",
    "AIKU",
    "HOORAY"
}

-- // Functions
function RedeemCodes()
    for _, code in ipairs(Codes) do 
        pcall(function()
            game:GetService("ReplicatedStorage").Packages.Knit.Services.CodesService.RF.Redeem:InvokeServer(code)
            task.wait(0.1) 
        end)
    end
end

function loadScript()
    pcall(function()
        repeat task.wait() until game.Players.LocalPlayer and game.Players.LocalPlayer.Character

        local queue_on_teleport = queue_on_teleport or syn.queue_on_teleport

        queue_on_teleport([[
            repeat wait() until game.Players.LocalPlayer:FindFirstChild("ReplicatedData")
            loadstring(game:HttpGet('https://raw.githubusercontent.com/Sristhier/Script/refs/heads/main/BLR', true))()
        ]])
    end)
end

function CreatePlayerESP(player)
    if player.Character and player.Character:FindFirstChild("Head") then
        if player.Character.Head:FindFirstChild("PlayerESP") then
            return
        end

        local billboard = Instance.new("BillboardGui")
        billboard.Name = "PlayerESP"
        billboard.Adornee = player.Character.Head 
        billboard.Size = UDim2.new(4, 0, 1.5, 0) 
        billboard.AlwaysOnTop = true
        billboard.StudsOffset = Vector3.new(0, 2, 0) 

        local textLabel = Instance.new("TextLabel")
        textLabel.Size = UDim2.new(1, 0, 1, 0)
        textLabel.BackgroundTransparency = 1
        textLabel.Text = player.Name
        textLabel.TextColor3 = Color3.fromRGB(0, 217, 255)
        textLabel.TextScaled = true
        textLabel.TextSize = espTextSize 
        textLabel.Parent = billboard
        billboard.Parent = player.Character.Head
    end
end

function TogglePlayerESP(state)
    playerESPEnabled = state
    if playerESPEnabled then
        for _, player in pairs(game.Players:GetPlayers()) do
            CreatePlayerESP(player)
        end
        game.Players.PlayerAdded:Connect(function(player)
            player.CharacterAdded:Connect(function()
                CreatePlayerESP(player)
            end)
        end)
    else
        for _, player in pairs(game.Players:GetPlayers()) do
            if player.Character and player.Character:FindFirstChild("Head") then
                local esp = player.Character.Head:FindFirstChild("PlayerESP")
                if esp then esp:Destroy() end
            end
        end
    end
end

function UpdateESPSize(newSize)
    espTextSize = newSize
    for _, player in pairs(game.Players:GetPlayers()) do
        if player.Character and player.Character:FindFirstChild("Head") then
            local esp = player.Character.Head:FindFirstChild("PlayerESP")
            if esp and esp:FindFirstChildOfClass("TextLabel") then
                esp:FindFirstChildOfClass("TextLabel").TextSize = espTextSize
            end
        end
    end
end

function ToggleBallESP(state)
    ballESPEnabled = state
    local ball = workspace:FindFirstChild("Football")
    if ball then
        if ballESPEnabled then
            if not ball:FindFirstChild("BallESP") then
                local billboard = Instance.new("BillboardGui")
                billboard.Name = "BallESP"
                billboard.Adornee = ball
                billboard.Size = UDim2.new(4, 0, 1, 0)
                billboard.AlwaysOnTop = true
                billboard.StudsOffset = Vector3.new(0, 2, 0)

                local textLabel = Instance.new("TextLabel")
                textLabel.Size = UDim2.new(1, 0, 1, 0)
                textLabel.BackgroundTransparency = 1
                textLabel.Text = "Ball"
                textLabel.TextScaled = true

                local function UpdateBallColor()
                    local inPlayer = false
                    for _, player in pairs(game.Players:GetPlayers()) do
                        if player.Character and ball:IsDescendantOf(player.Character) then
                            inPlayer = true
                            break
                        end
                    end
                    textLabel.TextColor3 = inPlayer and Color3.fromRGB(255, 86, 86) or Color3.fromRGB(113, 255, 236)
                end

                textLabel.Parent = billboard
                billboard.Parent = ball

                UpdateBallColor()
                ball.AncestryChanged:Connect(UpdateBallColor)
                ball.Changed:Connect(UpdateBallColor)
            end
        else
            local esp = ball:FindFirstChild("BallESP")
            if esp then esp:Destroy() end
        end
    end
end

function ToggleBallTracers(state)
    tracersEnabled = state
    local ball = workspace:FindFirstChild("Football")
    if ball then
        if tracersEnabled then
            if not ball:FindFirstChild("BallTracer") then
                local tracer = Instance.new("Beam")
                tracer.Name = "BallTracer"
                tracer.FaceCamera = true
                tracer.Color = ColorSequence.new(Color3.new(0.458823, 0.890196, 1)) 
                tracer.Width0 = 0.1
                tracer.Width1 = 0.1
                tracer.Transparency = NumberSequence.new(0.5)

                local attachment0 = Instance.new("Attachment", game.Players.LocalPlayer.Character.Head)
                local attachment1 = Instance.new("Attachment", ball)

                tracer.Attachment0 = attachment0
                tracer.Attachment1 = attachment1
                tracer.Parent = ball
            end
        else
            local tracer = ball:FindFirstChild("BallTracer")
            if tracer then tracer:Destroy() end
        end
    end
end

function LockontoBall()
    pcall(function()
        while getgenv().LockontoBalls == true do
            local ball = workspace:FindFirstChild("Football")
            if ball then
                local hitbox = ball:FindFirstChild("Hitbox")
                if hitbox then
                    local lookVector = (hitbox.Position - rootPart.Position).Unit
                    rootPart.CFrame = CFrame.new(rootPart.Position, rootPart.Position + lookVector)
                end
            end
            task.wait(0.01) 
        end
    end)
end

function HandlePlayerReset()
    player.CharacterAdded:Connect(function(newCharacter)
        newCharacter:WaitForChild("HumanoidRootPart")
        rootPart = newCharacter:FindFirstChild("HumanoidRootPart")
    end)
end

function TeleportToBall()
    pcall(function(player)
        while getgenv().TeleportToBall_Arg1 == true do
        local ball = ball 
        if ball then
            task.wait(0.1)
            local rootPart = rootPart 
            local tweenInfo = TweenInfo.new(selectedTweenSpeed, Enum.EasingStyle.Linear, Enum.EasingDirection.Out) 
            local goal = {CFrame = ball.CFrame}
            local tween = TweenService:Create(rootPart, tweenInfo, goal)
            tween:Play()
        elseif ball:IsDescendantOf(player.Character) then
            task.wait(0.1)
            local rootPart = rootPart 
            local tweenInfo = TweenInfo.new(selectedTweenSpeed, Enum.EasingStyle.Linear, Enum.EasingDirection.Out) 
            local goal = {CFrame = ball.CFrame}
            local tween = TweenService:Create(rootPart, tweenInfo, goal)
            tween:Play()
        elseif getgenv().TeleportToBall_Arg1 == false then
            break;
        else
            warn("[Kaos Hub] Error; TeleportToBall")
        end
    end
    end)
end


function AutoAwaken()
    pcall(function()
    while getgenv().AutoAwaken_Arg == true do
        game:GetService("ReplicatedStorage").Packages.Knit.Services.AwakeningService.RE.StartAwakening:FireServer()
        task.wait(0.1)
         end
    end)
end

function AutoFlow()
    pcall(function()
        while getgenv().AutoFlow_Arg == true do
            game:GetService("ReplicatedStorage").Packages.Knit.Services.FlowService.RE.Activate:FireServer()
            task.wait(0.1)
        end
    end)
end

function AutoSteal()
    pcall(function()
        while getgenv().AutoSteal_Arg == true do
            local ball = ball
            if not ball then
                task.wait(0.1) 
                return
            end

            for _, playerInstance in ipairs(game:GetService("Players"):GetPlayers()) do
                if playerInstance ~= game.Players.LocalPlayer then
                    local enemyCharacter = playerInstance.Character
                    if enemyCharacter and enemyCharacter:FindFirstChild("HumanoidRootPart") then
                        local enemyRootPart = enemyCharacter.HumanoidRootPart

                        if ball:IsDescendantOf(enemyCharacter) then
                            local distance = (enemyRootPart.Position - rootPart.Position).Magnitude

                            if distance <= getgenv().StealDistance then
                                local lookVector = (enemyRootPart.Position - rootPart.Position).Unit
                                rootPart.CFrame = CFrame.new(rootPart.Position, rootPart.Position + lookVector)

                                local VirtualInputManager = game:GetService("VirtualInputManager")
                                VirtualInputManager:SendKeyEvent(true, "E", false, game)
                                task.wait(0.1)
                                VirtualInputManager:SendKeyEvent(false, "E", false, game)
                                task.wait(0.3)
                            end
                        end
                    end
                end
            end

            if ball.Parent == workspace then
                local distanceToBall = (ball.Position - rootPart.Position).Magnitude
                if distanceToBall <= getgenv().StealDistance then
                    rootPart.CFrame = CFrame.new(ball.Position)
                    local VirtualInputManager = game:GetService("VirtualInputManager")
                    VirtualInputManager:SendKeyEvent(true, "E", false, game)
                    task.wait(0.1)
                    VirtualInputManager:SendKeyEvent(false, "E", false, game)
                    task.wait(0.3)
                end
            end
            task.wait(0.1)
        end
    end)
end

function AutoDribble()
    pcall(function()
        while getgenv().AutoDribble_Arg == true do
            if ball:IsDescendantOf(character) then
                for _, playerInstance in ipairs(Players:GetPlayers()) do
                    if playerInstance ~= player then
                        local enemyCharacter = playerInstance.Character
                        if enemyCharacter and enemyCharacter:FindFirstChild("HumanoidRootPart") then
                            local enemyRootPart = enemyCharacter:WaitForChild("HumanoidRootPart")
                            local distance = (enemyRootPart.Position - rootPart.Position).Magnitude

                            if distance <= getgenv().DribbleDistance then 
                                print("tried to dribble!!")
                                local VirtualInputManager = game:GetService("VirtualInputManager")
                                
                                VirtualInputManager:SendKeyEvent(true, "Q", false, game)
                                task.wait(0.1)
                                VirtualInputManager:SendKeyEvent(false, "Q", false, game)
                                task.wait(0.3)
                                print("Dribbled them ;D")
                            end
                        end
                    end
                end
            end
            task.wait(0.1)
        end
    end)
    return
end

function AutoAbility(key)
    pcall(function()
        while getgenv()["Auto" .. key .. "_Arg"] == true do
            local VirtualInputManager = game:GetService("VirtualInputManager")
            VirtualInputManager:SendKeyEvent(true, key, false, game)
            task.wait(0.1)
            VirtualInputManager:SendKeyEvent(false, key, false, game)
            task.wait(1) 
        end
    end)
end


local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local root_part = character:WaitForChild("HumanoidRootPart")

local BallService = ReplicatedStorage.Packages.Knit.Services.BallService.RE

getgenv().AutoFarmEnabled = false
getgenv().AutoFarmActive = false

local home_coords = Vector3.new(317.995697, 11.1665344, -61.4877625)
local away_coords = Vector3.new(-240.61618, 11.1665344, -38.7104416)
local safe_coords = Vector3.new(38.26, 11.17, -48.76)



function NoClip()
    for _, v in pairs(Workspace.SmallSquare:GetDescendants()) do
        if v:IsA("BasePart") then
            v.CanCollide = false
        end
    end

    for _, v in pairs(Workspace.Goals:GetDescendants()) do
        if v:IsA("BasePart") then
            v.CanCollide = false
        end
    end
end

function Clip()
    for _, v in pairs(Workspace.SmallSquare:GetDescendants()) do
        if v:IsA("BasePart") then
            v.CanCollide = true
        end
    end

    for _, v in pairs(Workspace.Goals:GetDescendants()) do
        if v:IsA("BasePart") then
            v.CanCollide = true
        end
    end
end

function isInLobby()
    local player = Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    
    if rootPart and Union then
        if (rootPart.Position - Union.Position).Magnitude < 50 then  
            return true
        end
    end
    return false
end

function isOnField()
    local player = Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    local fieldPart = game:GetService("Workspace").Field.Field 
    if rootPart and fieldPart then
        if (rootPart.Position - fieldPart.Position).Magnitude < 100 then
            return true
        end
    end
    return false
end


 function teleport_to_goal(goal_position)
    if root_part and typeof(goal_position) == "Vector3" then
        root_part.CFrame = CFrame.new(goal_position)
    else
        warn("[Kaos Hub] Error; Invalid Goal Position or HumanoidRootPart not found")
    end
end

 function has_ball()
    local ball = Workspace:FindFirstChild("Football")
    return ball and ball.Parent == character
end

 function AutoFarm(team)
    local teamCoords = { Home = home_coords, Away = away_coords }
    local targetCoords = teamCoords[team]

    if not targetCoords then
        warn("[Kaos Hub] Error; Invalid Team Name")
        return
    end

    if isInLobby() then
        warn("You cannot enable AutoFarm while in the lobby.")
        randomJoinTeam()
        return 
    end


    getgenv().AutoFarmActive = true
    NoClip()

    while getgenv().AutoFarmEnabled and getgenv().AutoFarmActive do
        pcall(function()
            if Ball_AutoFarm and BallHitbox_Autofarm then
                repeat
                root_part.CFrame = ball.CFrame
                task.wait(0.3)
                until BallHitbox_Autofarm:IsDescendantOf(lp.Character)
                print("Ball acquired!")
            else
                print("Ball not found!")
                StopAutoFarm()
                return
            end

            if Ball_AutoFarm.Parent == lp.Character then
                print("Moving to the goal...")

teleport_to_goal(targetCoords)

task.wait(0.3) 

local direction = (targetCoords - ball.Position).Unit

BallService.Shoot:FireServer(60, nil, nil, direction)

task.wait(0.2) 
BallService.HasShot:FireServer(false)

task.wait(0.1)
teleport_to_goal(targetCoords)


                else
                    print("[Kaos Hub] Waiting for ball possession...")
                end
        end)
        task.wait(0.1) 
    end
end

-- Stop AutoFarm Function
 function StopAutoFarm()
    getgenv().AutoFarmActive = false
    Clip()
end

function RedeemAllDaily()
    pcall(function()
        while getgenv().RedeemDaily == true do
            task.wait(0.2)
            game:GetService("ReplicatedStorage").Packages.Knit.Services.DailyRewardsService.RF.Redeem:InvokeServer()
            task.wait(0.1)

local ohString1 = "Quest1"

game:GetService("ReplicatedStorage").Packages.Knit.Services.QuestsService.RE.Quest:FireServer(ohString1)
task.wait(0.1)

local ohString1 = "Quest2"

game:GetService("ReplicatedStorage").Packages.Knit.Services.QuestsService.RE.Quest:FireServer(ohString1)
task.wait(0.1)

local ohString1 = "Quest3"

game:GetService("ReplicatedStorage").Packages.Knit.Services.QuestsService.RE.Quest:FireServer(ohString1)
        end
    end)
end

function JoinTeam(team)
    pcall(function()
        local positions = {"CF", "CM", "LW", "RW", "GK"} 
        local teamService = game:GetService("ReplicatedStorage").Packages.Knit.Services.TeamService.RE
        
        for _, position in ipairs(positions) do
            teamService.Select:FireServer(team, position) 
            task.wait(0.2) 
            
            local player = game:GetService("Players").LocalPlayer
            local currentTeam = player.Team 
            
            if currentTeam and currentTeam.Name == team then
                print("[Kaos Hub] Successfully joined " .. team .. " as " .. position)
                break 
            end
        end
    end)
end

function randomJoinTeam()
    local player = game:GetService("Players").LocalPlayer
    local currentTeam = player.Team
    local teamChoice

    if currentTeam and (currentTeam.Name == "Home" or currentTeam.Name == "Away") then
        teamChoice = currentTeam.Name == "Home" and "Away" or "Home"
    else
        teamChoice = math.random(1, 2) == 1 and "Home" or "Away"
        teamChoice = teamChoice == "Home" and "Away" or "Home" 
    end

    local positions = {"CF", "CM", "LW", "RW", "GK"}

    pcall(function()
        local teamService = game:GetService("ReplicatedStorage").Packages.Knit.Services.TeamService.RE

        for _, position in ipairs(positions) do
            teamService.Select:FireServer(teamChoice, position) 
            task.wait(0.2)

            local currentPlayer = game:GetService("Players").LocalPlayer
            local newTeam = currentPlayer.Team

            if newTeam and newTeam.Name == teamChoice then
                print("[Kaos Hub] Successfully joined " .. teamChoice .. " as " .. position)
                break
            end
        end
    end)
end

local Utils = KaosX.Utils:MakeUtilController()

local HookStart = tick()

local OldNewIndex;
OldNewIndex = hookmetamethod(game, "__newindex", newcclosure(function(self, Key, Value, ...)
    if Key == "WalkSpeed" then
        Utils:ChangeTable("Cache", "Speed", Value)

        if Utils:GetState("Speed") then
            return OldNewIndex(self, Key, Utils:GetInt("Speed"), ...)
        end
    elseif Key == "JumpPower" then
        Utils:ChangeTable("Cache", "Jump", Value)

        if Utils:GetState("Jump") then
            return OldNewIndex(self, Key, Utils:GetInt("Jump"), ...)
        end
    end
    return OldNewIndex(self, Key, Value, ...)
end))

local OldIndex;
OldIndex = hookmetamethod(game, "__index", newcclosure(function(self, Key, ...)
    if Key == "WalkSpeed" then
        return Utils:GetTable("Cache").Speed
    elseif Key == "JumpPower" then
        return Utils:GetTable("Cache").Jump
    end
    return OldIndex(self, Key, ...)
end))

local TeamSelection = MainTab:Dropdown({
    title = "Select Team",
    callback = function(value)
        print("Selected Team: " .. value)
        JoinTeam(value) 
    end
})

TeamSelection:Add("Home", "Home")
TeamSelection:Add("Away", "Away")


PlrTab:Slider({
    title = "Walk Speed",
    min = 16,
    max = 90,
    default = 16,
    callback = function(v)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = v
        Utils:SetInt("Speed", v)
    end
})

PlrTab:Toggle({
    title = "Walkspeed Enabled",
    callback = function(v)
        Utils:SetState("Speed", v)
    end
})

function InfStamina_Arg2()
    if getgenv().StaminaHooked then return end
    getgenv().StaminaHooked = true

    pcall(function()
        local stam = game:GetService("Players").LocalPlayer.PlayerStats:FindFirstChild("Stamina")
        if not stam then
            warn("Stamina not found!")
            return
        end

        local stamh
        stamh = hookmetamethod(game, "__index", function(self, v)
            if self == stam then
                print("Accessing:", v)
            end

            if getgenv().InfStamina_Arg1 and self == stam and v == "Value" then
                return 9e9 
            end

            return stamh(self, v)
        end)
    end)
end

local MiscStuff = PlrTab:CreateSection("Misc")


local InfStaminaToggleReal = PlrTab:Toggle({
    title = "Infinite Stamina",
    callback = function(value)
        getgenv().DecreaseStamina = value 
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local function decreaseStamina()
            while getgenv().DecreaseStamina do
                task.wait(0.5) 
                local args = {
                    [1] = 0/0 
                }
                pcall(function()
                    ReplicatedStorage:WaitForChild("Packages")
                        :WaitForChild("Knit")
                        :WaitForChild("Services")
                        :WaitForChild("StaminaService")
                        :WaitForChild("RE")
                        :WaitForChild("DecreaseStamina")
                        :FireServer(unpack(args))
                end)
            end
        end
        task.spawn(decreaseStamina)
        task.spawn(function()
            while task.wait() do
                if not getgenv().DecreaseStamina then
                    break
                end
            end
        end)
    end
})

local TrollStuff = PlrTab:CreateSection("Troll")

local ButtonCrash = PlrTab:Button({
    name = "Crash/Lag Server",
    callback = function() 
        local a = task.wait(math.random(1,5))
        Notification:Notify(
            {Title = "Kaos Hub", Description = "Starting Server Lag in ".. a .."sec"},
            {OutlineColor = Color3.fromRGB(175,238,238),Time = 5, Type = "image"},
            {Image = "http://www.roblox.com/asset/?id=113911860121602", ImageColor = Color3.fromRGB(175,238,238)}
            )

        task.wait(a)

        local shootEvent = game:GetService("ReplicatedStorage").Packages.Knit.Services.BallService.RE:WaitForChild("Shoot")
        local ohNumber1 = 110
        local ohNil2 = nil
        local ohNil3 = nil
        local ohVector34 = Vector3.new()
        
        for i = 1, 30000 do
            shootEvent:FireServer(ohNumber1, ohNil2, ohNil3, ohVector34)
        end        
    end})



--[[ 
local StyleUnlockNew = PlrTab:CreateSection("Syle Unlocks")

local selectedStyleDropdown = nil

local StyleUnlockDropdown = PlrTab:Dropdown({
    title = "Choose Style to unlock (Bugged)",
    callback = function(selectedStyle)
        selectedStyleDropdown = selectedStyle 
    end
})

StyleUnlockDropdown:Add("Sae", "Sae")
StyleUnlockDropdown:Add("Rin", "Rin")
StyleUnlockDropdown:Add("Nagi", "Nagi")
StyleUnlockDropdown:Add("Shidou", "Shidou")
StyleUnlockDropdown:Add("Aiku", "Aiku")
StyleUnlockDropdown:Add("King", "King")
StyleUnlockDropdown:Add("Bachira", "Bachira")
StyleUnlockDropdown:Add("Gagamaru", "Gagamaru")
StyleUnlockDropdown:Add("Isagi", "Isagi")
StyleUnlockDropdown:Add("Chigiri", "Chigiri")

local StlyeUnlockButton = PlrTab:Button({
    name = "Enable Style",
    callback = function()
        if selectedStyleDropdown then
            task.spawn(function()
                while true do
                    task.wait(0.5) 
                    if player:FindFirstChild("PlayerStats") and player.PlayerStats:FindFirstChild("Style") then
                        player.PlayerStats.Style.Value = selectedStyleDropdown
                    else
                        break 
                    end
                end
            end)
        else
            print("k")
        end
    end
})

--]]

local MainStuff = MainTab:CreateSection("Dashboard")

local AutoFarmHomeToggle = MainTab:Toggle({
    title = "Auto Farm [Home]",
    callback = function(state)
        if state == true then 
            JoinTeam("Away")
        end
        if isInLobby() and state == true then
            warn("You cannot enable AutoFarm while in the lobby.")
            StopAutoFarm()
            Notification:Notify(
            {Title = "Kaos Hub", Description = "Can not Enable Auto Farm from Lobby!"},
            {OutlineColor = Color3.fromRGB(175,238,238),Time = 5, Type = "image"},
            {Image = "http://www.roblox.com/asset/?id=113911860121602", ImageColor = Color3.fromRGB(175,238,238)}
            )
            return
        end

        getgenv().AutoFarmEnabled = state
        if state then
            AutoFarm("Home")
        else
            StopAutoFarm()
            return  
        end
    end
})

local AutoFarmAwayToggle = MainTab:Toggle({
    title = "Auto Farm [Away]",
    callback = function(state)
        if isInLobby() and state == true then
            warn("You cannot enable AutoFarm while in the lobby.")
            StopAutoFarm()
            
                Notification:Notify(
                {Title = "Kaos Hub", Description = "Can not Enable Auto Farm from Lobby!"},
                {OutlineColor = Color3.fromRGB(175,238,238),Time = 5, Type = "image"},
                {Image = "http://www.roblox.com/asset/?id=113911860121602", ImageColor = Color3.fromRGB(175,238,238)}
                )

            return
        end
        getgenv().AutoFarmEnabled = state
        if state then
            AutoFarm("Away")
        else
            StopAutoFarm()
        end
    end
})

local BallStuff = MainTab:CreateSection("Ball Config")


local LockOn = MainTab:Toggle({
    title = "Lock on Ball",
    callback = function(bool)
        if isInLobby() and bool == true then
            warn("You cannot enable Lock on Ball while in the lobby.")
            StopAutoFarm()
    Notification:Notify(
    {Title = "Kaos Hub", Description = "Can not Enable Lock on Ball from Lobby!"},
    {OutlineColor = Color3.fromRGB(175,238,238),Time = 5, Type = "image"},
    {Image = "http://www.roblox.com/asset/?id=113911860121602", ImageColor = Color3.fromRGB(175,238,238)}
)
            return
        end
        getgenv().LockontoBalls = bool
        
        if bool then
            LockontoBall()  
        end
    end
})


HandlePlayerReset()


local slider = MainTab:Slider({
	title = "Tween Speed",
	min = 0.1,
	max = 2,
	default = 0.5,
	callback = function(TweenSpeedSlider) 
        TweenSpeedSlider = selectedTweenSpeed
    end 
})


function teleportToBall()
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end

    
    local ball = workspace:FindFirstChild("Football")
    if ball and ball:FindFirstChild("BallAnims") and ball.BallAnims:FindFirstChild("BALL") then
       
        LocalPlayer.Character.HumanoidRootPart.CFrame = ball.BallAnims.BALL.CFrame + Vector3.new(0, 5, 0) 
    end
end


task.spawn(function()
    while task.wait(getgenv().teleportDelay) do
        if getgenv().autoTPBall then
            pcall(teleportToBall)
        end
    end
end)



local TpToBallToggle = MainTab:Toggle({
    title = "Teleport to Ball",
    callback = function(bool)
        getgenv().TeleportToBall_Arg1 = bool
        while bool do
            task.wait(0.1)
            TeleportToBall()
        end
    end
})

local TpToBallToggle = MainTab:Toggle({
    title = "Take Ball",
    callback = function(value)
        getgenv().autoTPBall = value 
    end
})


local OtherStuff = MainTab:CreateSection("Others")

local CodesBtn = MainTab:Button({
    name = "Redeem All Codes [REQ: Lvl 5]",
    callback = function()
        RedeemCodes()
    end
})

local DailyRedeem = MainTab:Toggle({
    title = "Claim All Quests",
    callback = function(bool)
        getgenv().RedeemDaily = bool
        while bool do
            task.wait(0.1)
            RedeemAllDaily()
        end
    end
})


--[[
local sliderShoot = MainTab:Slider({
    title = "Shoot Power Value",
    min = 1,
    max = 400,
    default = 110,
    callback = function(v)
        shootPowerValue = v 
    end
})

local ShootPowerToggle = MainTab:Toggle({
    title = "Enable Shoot Power",
    callback = function(bool)
        enableShootPower = bool 
    end
})

local mt = getrawmetatable(game)
setreadonly(mt, false)

local oldNamecall = mt.__namecall
mt.__namecall = function(self, ...)
    local method = getnamecallmethod()
    local args = {...}

    if method == "FireServer" and tostring(self) == "Shoot" then
        if enableShootPower then
            args[1] = shootPowerValue 
        end
    end

    return oldNamecall(self, unpack(args))
end

setreadonly(mt, true) 
--]]



--[[
local FlowBtn = MainTab:Button({
    name = "Infinite Flow",
    callback = function()
        local player = game:GetService("Players").LocalPlayer
        local flowBar = player.PlayerStats.FlowBar
        local inFlow = player.PlayerStats.InFlow

        local flowh
        flowh = hookmetamethod(game, "__index", function(self, v)
            if self == flowBar and v == "Value" then
                return 100
            end
            
            if self == inFlow and v == "Value" then
                return true
            end

            return flowh(self, v)
        end)

        print("Infinite Flow Activated!")  
    end
})


local AwakenBtn = MainTab:Button({
    name = "Infinite Awaken",
    callback = function()
        local player = game:GetService("Players").LocalPlayer
        local awakeningBar = player.PlayerStats.AwakeningBar
        local inAwakening = player.PlayerStats.InAwakening
        local Awakened = game:GetService("ReplicatedStorage").GameValues.Awakened
        local AwakeningCutscene = game:GetService("ReplicatedStorage").GameValues.AwakeningCutscene
        
        local awakeningHook;
        awakeningHook = hookmetamethod(game, "__index", function(self, v)
            if self == awakeningBar and v == "Value" then
                return 100 
            end
            
            if self == inAwakening and v == "Value" then
                return true  
            end

            if self == Awakened and v == "Value" then
                return true
            end

            if self == AwakeningCutscene and v == "Value" then
                return true
            end

            return awakeningHook(self, v)
        end)
    
        print("Infinite Awaken Activated!") 
    end
})

--]]

local AwakenToggle = MiscTab:Toggle({
    title = "Auto Awaken",
    callback = function(bool)
        getgenv().AutoAwaken_Arg = bool
        while bool do
            task.wait(0.1)
            AutoAwaken()
        end
    end
})

local FlowToggle = MiscTab:Toggle({
    title = "Auto Flow",
    callback = function(bool)
        getgenv().AutoFlow_Arg = bool
        while bool do
            task.wait(0.1)
            AutoFlow()
        end
    end
})

local StealandDribbleSection = MiscTab:CreateSection("Auto Config")


local StealSlider = MiscTab:Slider({
    title = "Steal Config",
    min = 2,
    max = 20,
    default = 10,
    callback = function(v) 
        getgenv().StealDistance = v 
    end 
})

local StealToggle = MiscTab:Toggle({
    title = "Auto Steal",
    callback = function(bool)
        getgenv().AutoSteal_Arg = bool
        if bool then
            AutoSteal()
        end
    end
})

game.Players.LocalPlayer.CharacterAdded:Connect(function(newCharacter)
    task.wait(1)
    if getgenv().AutoSteal_Arg == true then
        AutoSteal()
    end
end)

local DribbleSlider = MiscTab:Slider({
    title = "Dribble Config",
    min = 2,
    max = 18,
    default = 5,
    callback = function(v) 
        getgenv().DribbleDistance = v 
    end 
})

local DribbleToggle = MiscTab:Toggle({
    title = "Auto Dribble",
    callback = function(bool)
        getgenv().AutoDribble_Arg = bool
        while bool do
            task.wait(0.1)
            AutoDribble()
        end
    end
})

local HitboxSection = MiscTab:CreateSection("Hitbox Config")

local HitboxSlider = MiscTab:Slider({
    title = "Hitbox Value",
    min = 2,
    max = 30,
    default = 15,
    callback = function(v)
        getgenv().HeadSize = v
    end 
})

local HitboxToggle = MiscTab:Toggle({
    title = "Enable Hitbox Expansion",
    default = false,
    callback = function(v)
        getgenv().Enabled = v
        if not v then
            pcall(function()
                football.Size = Vector3.new(2.04931, 2.07319, 2.09624)
                football.Transparency = 0.1
                football.BrickColor = BrickColor.new("Medium stone grey")
                football.Material = Enum.Material.Plastic
            end)
        end
    end
})

function expandBallHitbox(ball)
    if getgenv().Enabled then
        pcall(function()
            ball.Size = Vector3.new(getgenv().HeadSize, getgenv().HeadSize, getgenv().HeadSize)
            ball.Transparency = 0.7
            ball.BrickColor = BrickColor.new("Really blue")
            ball.Material = Enum.Material.Neon
            ball.CanCollide = true
        end)
    end
end

football.Touched:Connect(function(hit)
    if hit.Parent == character then
        expandBallHitbox(football)
    end
end)

local AbilitySection = MiscTab:CreateSection("Abilities")

local AbilityCToggle = MiscTab:Toggle({
    title = "Auto Ability C",
    callback = function(bool)
        getgenv().AutoC_Arg = bool
        while bool do
            task.wait(0.1)
            AutoAbility("C")
        end
    end
})

local AbilityVToggle = MiscTab:Toggle({
    title = "Auto Ability V",
    callback = function(bool)
        getgenv().AutoV_Arg = bool
        while bool do
            task.wait(0.1)
            AutoAbility("V")
        end
    end
})

local AbilityBToggle = MiscTab:Toggle({
    title = "Auto Ability B",
    callback = function(bool)
        getgenv().AutoB_Arg = bool
        while bool do
            task.wait(0.1)
            AutoAbility("B")
        end
    end
})

local playerESP = ESPTab:Toggle({
    title = "Player ESP",
    callback = function(value)
        TogglePlayerESP(value)
    end
})

local ballESP = ESPTab:Toggle({
    title = "Ball ESP",
    callback = function(value)
        ToggleBallESP(value)
    end
})

local ballTracers = ESPTab:Toggle({
    title = "Ball Tracers",
    callback = function(value)
        ToggleBallTracers(value)
    end
})

local SpinSection = RollTab:CreateSection("Style Spinning")


local StyleRollToggle = RollTab:Toggle({
    title = "Enable Style Roll",
    callback = function(state)
        getgenv().EnableStyleRoll = state
    end
})

local StyleDropdown = RollTab:Dropdown({
    title = "Choose a Style",
    callback = function(selectedStyle)
        getgenv().SelectedStyle = selectedStyle 
        task.spawn(function()
            while getgenv().EnableStyleRoll do
                task.wait(0.5)
                if player:FindFirstChild("PlayerStats") and player.PlayerStats:FindFirstChild("Style") then
                    local currentStyle = player.PlayerStats.Style.Value
                    if currentStyle == getgenv().SelectedStyle then
                        break
                    elseif (getgenv().StopOnLegendary and isLegendary(currentStyle)) or 
                           (getgenv().StopOnMythic and isMythic(currentStyle)) then
                        print("Stopping because a desired rarity was achieved:", currentStyle)
                        break
                    else
                        task.wait(1)
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.StyleService.RE.Spin:FireServer()
                    end
                end
            end
        end)
    end
})

StyleDropdown:Add("Sae", "Sae") -- Mythic
StyleDropdown:Add("Rin", "Rin") -- Mythic
StyleDropdown:Add("Nagi", "Nagi") -- Legendary
StyleDropdown:Add("Shidou", "Shidou") -- Mythic
StyleDropdown:Add("Aiku", "Aiku") -- Mythic
StyleDropdown:Add("King", "King") -- Legendary
StyleDropdown:Add("Bachira", "Bachira") -- Epic
StyleDropdown:Add("Gagamaru", "Gagamaru") -- Epic
StyleDropdown:Add("Isagi", "Isagi") -- Rare
StyleDropdown:Add("Chigiri", "Chigiri") -- Rare

function isLegendary(style)
    return style == "Nagi" or style == "King" 
end

function isMythic(style)
    return style == "Sae" or style == "Rin" or style == "Shidou" or style == "Aiku" 
end

local StyleRollToggleLegendary = RollTab:Toggle({
    title = "Stop on Legendary",
    callback = function(state)
        getgenv().StopOnLegendary = state
    end
})

local StyleRollToggleMythic = RollTab:Toggle({
    title = "Stop on Mythic",
    callback = function(state)
        getgenv().StopOnMythic = state
    end
})

local FlowSpinSection = RollTab:CreateSection("Flow Spinning")

local FlowRollToggle = RollTab:Toggle({
    title = "Enable Flow Roll",
    callback = function(state)
        getgenv().EnableFlowRoll = state
    end
})

local FlowDropdown = RollTab:Dropdown({
    title = "Choose a Flow",
    callback = function(selectedFlow)
        getgenv().SelectedFlow = selectedFlow 
        task.spawn(function()
            while getgenv().EnableFlowRoll do
                task.wait(0.5)
                if player:FindFirstChild("PlayerStats") and player.PlayerStats:FindFirstChild("Flow") then
                    local currentFlow = player.PlayerStats.Flow.Value
                    if currentFlow == getgenv().SelectedFlow then
                        break
                    elseif (getgenv().StopOnLegendaryFlow and isLegendaryFlow(currentFlow)) or 
                           (getgenv().StopOnMythicFlow and isMythicFlow(currentFlow)) then
                        print("Stopping because a desired rarity was achieved:", currentFlow)
                        break
                    else
                        task.wait(0.2)
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.FlowService.RE.Spin:FireServer()
                    end
                end
            end
        end)
    end
})

FlowDropdown:Add("Awakened Genius", "Awakened Genius") -- Mythic
FlowDropdown:Add("Snake", "Snake") -- Mythic
FlowDropdown:Add("Prodigy", "Prodigy") -- Mythic
FlowDropdown:Add("Wild Card", "Wild Card") -- Legendary
FlowDropdown:Add("Demon Wings", "Demon Wings") -- Legendary
FlowDropdown:Add("Monster", "Monster") -- Epic
FlowDropdown:Add("Gale Burst", "Gale Burst") -- Epic
FlowDropdown:Add("Genius", "Genius") -- Epic
FlowDropdown:Add("King's Instinct", "King's Instinct") -- Epic
FlowDropdown:Add("Lightning", "Lightning") -- Rare
FlowDropdown:Add("Puzzle", "Puzzle") -- Rare

function isLegendaryFlow(flow)
    return flow == "Wild Card" or flow == "Demon Wings" 
end

function isMythicFlow(flow)
    return flow == "Awakened Genius" or flow == "Snake" or flow == "Prodigy" 
end

local FlowRollToggleLegendary = RollTab:Toggle({
    title = "Stop on Legendary",
    callback = function(state)
        getgenv().StopOnLegendaryFlow = state
    end
})

local FlowRollToggleMythic = RollTab:Toggle({
    title = "Stop on Mythic",
    callback = function(state)
        getgenv().StopOnMythicFlow = state
    end
})

local myCustom = CreditsTab:CreateCustom({
    name = "Join our Discord for Updates!",
    callback = function() end,
    defaultImageId = "rbxassetid://114392311031192",
    defaultText = "Main Developer: S (kyo)\nKaos Hub\nStatus: Online"
})

local DiscordStuff = CreditsTab:CreateSection("Discord")

local inviteLinks = {
    "https://discord.gg/JExYEwmSXb",
    "https://discord.gg/fdUzBAtXPB",
    "https://discord.gg/aaaskN6KDJ"
}

local label = CreditsTab:Label({message = inviteLinks[1]})  

local currentIndex = 1  
local btn2 = CreditsTab:Button({
    name = "Generate New Discord Invite",
    callback = function()
        currentIndex = currentIndex + 1
        if currentIndex > #inviteLinks then
            currentIndex = 1  
        end
        
        label:SetText(inviteLinks[currentIndex])
    end
})


local toggleVisibility = _G.ToggleUIVisibility

if not toggleVisibility then
    warn("UI toggle function is not available!")
    return
end

local currentKeybind = Enum.KeyCode.M 

local function updateKeybind(newKey)
    currentKeybind = newKey
    print("Keybind updated to:", newKey.Name)
end

local myKeybind = SettingsTab:CreateKeybind({
    name = "UI Toggle Key",
    callback = function(newKey)
        updateKeybind(newKey) 
    end,
    defaultKey = currentKeybind
})

UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if input.KeyCode == currentKeybind and not gameProcessedEvent then
        toggleVisibility() 
    end
end)

local UnlockFpsBtn = SettingsTab:Button({
    name = "Unlock Fps",
    callback = function()
        setfpscap(9999)
    end
})

local LoadBtn = SettingsTab:Button({
    name = "Auto Load",
    callback = function()
        loadScript()
    end
})


local ServerhopButton = SettingsTab:Button({
    name = "Server Hop",
    callback = function()
local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
local File = pcall(function()
    AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
end)
if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
end
function TPReturner()
    local Site;
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
    end
    local ID = ""
    if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
        foundAnything = Site.nextPageCursor
    end
    local num = 0;
    for i,v in pairs(Site.data) do
        local Possible = true
        ID = tostring(v.id)
        if tonumber(v.maxPlayers) > tonumber(v.playing) then
            for _,Existing in pairs(AllIDs) do
                if num ~= 8 then
                    if ID == tostring(Existing) then
                        Possible = false
                    end
                else
                    if tonumber(actualHour) ~= tonumber(Existing) then
                        local delFile = pcall(function()
                            delfile("NotSameServers.json")
                            AllIDs = {}
                            table.insert(AllIDs, actualHour)
                        end)
                    end
                end
                num = num + 1
            end
            if Possible == true then
                table.insert(AllIDs, ID)
                wait()
                pcall(function()
                    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                    wait()
                    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                end)
                wait(4)
            end
        end
    end
end

function Teleport()
    while wait() do
        pcall(function()
            TPReturner()
            if foundAnything ~= "" then
                TPReturner()
            end
        end)
    end
end

Teleport()
    end
})

local CardDropdown = UnlocksTab:Dropdown({
    title = "Select Card to Unlock",
    callback = function(selectedCard)
        local args = {
            [1] = "Cards",
            [2] = selectedCard
        }
        game:GetService("ReplicatedStorage")
            .Packages.Knit.Services.CustomizationService.RE.Customize:FireServer(unpack(args))
    end
})

local Cards = game:GetService("ReplicatedStorage").Assets.Customization.Cards
for _, card in ipairs(Cards:GetChildren()) do
    CardDropdown:Add(card.Name, card.Name)
end

local AccessoryDropdown = UnlocksTab:Dropdown({
    title = "Select Accessory to Unlock",
    callback = function(selectedAccessory)
        local args = {
            [1] = "Cosmetics",
            [2] = selectedAccessory
        }
        game:GetService("ReplicatedStorage")
            .Packages.Knit.Services.CustomizationService.RE.Customize:FireServer(unpack(args))
    end
})

local Accessories = game:GetService("ReplicatedStorage").Assets.Cosmetics
for _, accessory in ipairs(Accessories:GetChildren()) do
    AccessoryDropdown:Add(accessory.Name, accessory.Name)
end

local GoalEffectDropdown = UnlocksTab:Dropdown({
    title = "Select Goal Effect to Unlock",
    callback = function(selectedGoalEffect)
        local args = {
            [1] = "GoalEffects",
            [2] = selectedGoalEffect
        }
        game:GetService("ReplicatedStorage")
            .Packages.Knit.Services.CustomizationService.RE.Customize:FireServer(unpack(args))
    end
})

local GoalEffects = game:GetService("ReplicatedStorage").Assets.GoalEffects
for _, effect in ipairs(GoalEffects:GetChildren()) do
    GoalEffectDropdown:Add(effect.Name, effect.Name)
end
