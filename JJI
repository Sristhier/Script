-- // [Kaos Hub] Jujutsu Infinite

repeat task.wait() until game:IsLoaded()

-- // Security - Flags
print("Checks;")
pcall(function()
    local mt = getrawmetatable(game)
    local oldNameCall = mt.__namecall
    setreadonly(mt, false)

    mt.__namecall = newcclosure(function(self, ...)
        local method = getnamecallmethod()
        local args = {...}

        for _, arg in ipairs(args) do
            if type(arg) == "string" and string.lower(arg):find("pineapple") then
                warn("Blocking...")
                return nil 
            end
        end

        return oldNameCall(self, ...)
    end)

    setreadonly(mt, true)
end)

-- // UI
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local LP =  game:GetService("Players").LocalPlayer
local RS = game:GetService("ReplicatedStorage")
local RootPartPlr = game:GetService("Players").LocalPlayer.Character:WaitForChild("HumanoidRootPart")
local character = game.Players.LocalPlayer.Character
local GuiService = game:GetService("GuiService")
local Players = game:GetService("Players")
local VirtualInputManager = game:GetService("VirtualInputManager")
local skillsFolder = game:GetService("ReplicatedStorage").Skills

local KillAura_Range = 50
local currentCooldown = nil
local Position_Distance = 5
local range = 50
local oldCooldown = {}
local hitStack = 150
local cooldownTime = 0.1
local CodesTable = {
    "MISSION_SHUTDOWN",
    "RELEASE_SHUTDOWN_SRRY",
    "MERRY_CHRISTMAS",
    "RELEASE",
    "50K_FOLLOWERS",
    "JJ_SHUTDOWN",
    "BACK_UP_AGAIN",
    "HAPPY_2025"
}
local SpecialGradeNames = {
    "Infinity",
    "Demon Vessel", 
    "Soul Manipulation",
    "Gambler Fever",
    "Curse Queen",
    "Star Rage"
}

local LegendaryNames = {
    "Hydrokinesis",
    "Volcano",
    "Judgeman"
}

-- // Envs
getgenv().KillAura_Arg1 = false
getgenv().CollectDrops_Arg1 = false
getgenv().M1_Stack_Arg1 = false
getgenv().AutoFarmMobs_Arg1 = false
getgenv().AutoQuest_Arg1 = false

-- // Functions 
function killAura()
    pcall(function()
        while getgenv().KillAura_Arg1 == true do
            task.wait(math.random(1,2))
            local mobsFolder = game:GetService("Workspace").Objects.Mobs
            for _, mob in pairs(mobsFolder:GetChildren()) do
                local humanoid = mob:FindFirstChild("Humanoid")
                if humanoid and (mob.HumanoidRootPart.Position - character.HumanoidRootPart.Position).Magnitude <= range then
                    humanoid.Health = 0
                end
            end
        end
    end)
end

function CollectDrops()
    pcall(function()
        while getgenv().CollectDrops_Arg1 == true do
            task.wait()
        for i, v in pairs(game:GetService("Workspace").Objects.Drops:GetChildren()) do
            if v:IsA("Model") then
               local RootPart = v:FindFirstChild("Root")
               local ProximityPrompt = v:WaitForChild("Collect")
                if RootPart and RootPart:IsA("BasePart") then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = RootPart.CFrame
                    task.wait(1)
                    fireproximityprompt(ProximityPrompt)
                end
            elseif getgenv().CollectDrops_Arg1 == false then 
                break;
            else
                print("Error" .. v)
             end
        end 
      end
    end)
end

function activateChest()
    local chest = workspace:FindFirstChild("Objects") and workspace.Objects:FindFirstChild("Drops") and workspace.Objects.Drops:FindFirstChild("Chest")
    if chest then
        for i, v in pairs(chest:GetDescendants()) do
            if v:IsA("ProximityPrompt") then
                fireproximityprompt(v, 1, true)
            end
        end
        return true
    end
    return false
end

function checkLootAndChest()
    local player = game:GetService("Players").LocalPlayer
    local loot = player.PlayerGui:FindFirstChild("Loot")
    
    if loot and loot.Enabled then
        local button = player.PlayerGui.Loot.Frame.Flip
        game:GetService("GuiService").SelectedObject = button
        game:GetService("GuiService").SelectedObject = button
        game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.Return, false, game)
        game:GetService("VirtualInputManager"):SendKeyEvent(false, Enum.KeyCode.Return, false, game)
    else
        activateChest()
    end
end

function GetMobs()
    local mobs = {}
    for _, mob in pairs(game:GetService("Workspace").Objects.Mobs:GetChildren()) do
        if mob:FindFirstChild("Humanoid") then
            table.insert(mobs, mob.Humanoid)
        end
    end
    return mobs
end

function AutoFarmMobs()
    pcall(function()
        while getgenv().AutoFarmMobs_Arg1 do
            task.wait(0.1)  
            local Mobs = game:GetService("Workspace").Objects.Mobs:GetChildren()
            for i = 1, #Mobs do
                local v = Mobs[i]
                
                if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and
                v:FindFirstChildOfClass("Humanoid").Health > 0 then
                    game.Players.LocalPlayer.Character.PrimaryPart.CFrame = CFrame.new(v.PrimaryPart.Position + Vector3.new(0, Position_Distance,0))
                end
            end
        end
    end)
end

function findNearestMob()
    local closestMob = nil
    local shortestDistance = math.huge  

    for _, mob in pairs(workspace:WaitForChild("Objects"):WaitForChild("Mobs"):GetChildren()) do
        if mob:FindFirstChild("HumanoidRootPart") then
            local mobHumanoidRootPart = mob:FindFirstChild("HumanoidRootPart")
            
            local distance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - mobHumanoidRootPart.Position).Magnitude
            
            if distance < shortestDistance then
                closestMob = mob
                shortestDistance = distance
            end
        end
    end
    
    return closestMob
end

function M1_Stack()
    pcall(function()
        while getgenv().M1_Stack_Arg1 == true do
            task.wait(math.random(0.001, .1))
            
            local nearestMob = findNearestMob()
            if nearestMob then
                local args = {
                    [1] = 1,  
                    [2] = {nearestMob:WaitForChild("Humanoid")}  
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Combat"):WaitForChild("M1"):FireServer(unpack(args))
            end
        end
    end)
end

function M2_Stack()
    pcall(function()
        while getgenv().M2_Stack_Arg1 == true do
            task.wait(math.random(0.001, .1))  
            
            local nearestMob = findNearestMob()
            if nearestMob then
                local args = {
                    [1] = 1,  
                    [2] = {nearestMob:WaitForChild("Humanoid")}
                }
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Combat"):WaitForChild("M1"):FireServer(unpack(args))
            end
        end
    end)
end

function Redeem_Codes()
    local Codes = CodesTable
    pcall(function()
        for i = 1, #Codes do
            task.wait(1)
            local Code = Codes[i]
            game:GetService("ReplicatedStorage").Remotes.Server.Data.RedeemCode:InvokeServer(Code)
        end
    end)
end

function AutoQuest()
    pcall(function()
        while getgenv().AutoQuest_Arg1 == true do
            task.wait()

            local player = game.Players.LocalPlayer
            local imageButton = player.PlayerGui:WaitForChild("Missions")
                :WaitForChild("Frame")
                :WaitForChild("Main")
                :WaitForChild("Cards")
                :WaitForChild("QuestCard2")
                :WaitForChild("Info")
                :WaitForChild("Accept")

            local screenGui = player.PlayerGui:WaitForChild("Missions")

            if screenGui:IsA("ScreenGui") and not screenGui.Enabled then
                screenGui.Enabled = true
            end

            local function isVisible(guiObject)
                while guiObject.Parent do
                    if guiObject:IsA("GuiObject") and not guiObject.Visible then
                        return false
                    end
                    guiObject = guiObject.Parent
                end
                return true
            end

            if imageButton and imageButton:IsA("GuiObject") and isVisible(imageButton) then
                GuiService.AutoSelectGuiEnabled = true

                GuiService.SelectedObject = imageButton

                task.wait(0.1) 
                VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, nil) 
                task.wait(0.05) 
                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, nil) 

                GuiService.AutoSelectGuiEnabled = false

                print("Auto Quest, Pressed; ", imageButton.Name)
            else
                warn("Missing Img Button")
            end
        end
    end)
end

function calculateDist(cframe1, cframe2)
    return (cframe1.Position - cframe2.Position).magnitude
end


local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Sristhier/Script/refs/heads/main/UI"))()
local main = Library:new{
    name = '<font color="rgb(255, 255, 255)">Kaos</font> <font color="rgb(0, 200, 200)">Hub</font>' 
}

local MainTab = main:CreateTab({
    name = "Information",
    icon = "rbxassetid://18182790592"
})

local FarmTab = main:CreateTab({
    name = "Farm",
    icon = "rbxassetid://18182792140"
})


local MiscTab = main:CreateTab({
    name = "Misc",
    icon = "rbxassetid://18182792890"
})

local SpinTab = main:CreateTab({
    name = "Spinning",
    icon = "rbxassetid://18182794282"
})

local SettingsTab = main:CreateTab({
    name = "Settings",
    icon = "rbxassetid://128342900381309"
})


local InfoSection = MainTab:CreateSection("Information") 

local InitiateLabel1 = MainTab:Label({
    message = "Innitiate Slot 1: "..game:GetService("Players").LocalPlayer.ReplicatedData.innates["1"].Value
})

local InitiateLabel2 = MainTab:Label({
    message = "Innitiate Slot 2: "..game:GetService("Players").LocalPlayer.ReplicatedData.innates["2"].Value
})

local InitiateLabel3 = MainTab:Label({
    message = "Innitiate Slot 3: ".. (game:GetService("Players").LocalPlayer.ReplicatedData.innates["3"].Value or "N/A")
})

local InitiateLabel4 = MainTab:Label({
    message = "Innitiate Slot 4: ".. (game:GetService("Players").LocalPlayer.ReplicatedData.innates["4"].Value or "N/A")
})

local CashLabel = MainTab:Label({
    message = "Cash: "..game:GetService("Players").LocalPlayer.ReplicatedData.cash.Value 
})

local LevelLabel = MainTab:Label({
    message = "Level: "..game:GetService("Players").LocalPlayer.ReplicatedData.level.Value
})

local SpinsLabel = MainTab:Label({
    message = "Spins Available: "..game:GetService("Players").LocalPlayer.ReplicatedData.spins.Value
})

local ButtonRefresh = MainTab:Button()
ButtonRefresh:SetText("Refresh Info")
ButtonRefresh:SetCallBack(function()
    RefreshLabels() 
end)

local FarmSection = FarmTab:CreateSection("Farm") 

local TPSlider = FarmTab:Slider({
    title = "Distance",
    min = 1,
    max = 15,
    default = 5,
    callback = function(v) 
        Position_Distance = v
    end 
})

local AutoFarmToggle = FarmTab:Toggle({
    callback = function(bool)
        getgenv().AutoFarmMobs_Arg1 = bool
        print("AutoFarm Started;")
        
        task.spawn(function()
            while bool do
                task.wait()
                AutoFarmMobs()
            end
        end)

        task.spawn(function()
            getgenv().M2_Stack_Arg1 = true
            M2_Stack()
        end)
    end,
    title = "Auto Farm Mobs"
})

local AdditionsSec = FarmTab:CreateSection("Quests") 

local OpQuestToggle = FarmTab:Toggle({
    callback = function(b)
        if b then
            getgenv().AutoFarm1 = true
            local check = false
    
            game:GetService("RunService").Heartbeat:Connect(function()
                if getgenv().AutoFarm1 and not check then
                    check = true
    
                    local localPlayer = game.Players.LocalPlayer
                    local ohTable1 = {
                        ["type"] = "Kill",
                        ["set"] = "Yuki Fortress Set",
                        ["rewards"] = {
                            ["essence"] = 40,
                            ["chestMeter"] = 79,
                            ["exp"] = 8850000,
                            ["cash"] = 51000
                        },
                        ["rewardsText"] = "8.85 Mi EXP | Kaos Hub",
                        ["difficulty"] = 3,
                        ["title"] = "Defeat",
                        ["level"] = 430,
                        ["grade"] = LP.ReplicatedData.grade.Value,
                        ["subtitle"] = "a Curse User"
                    }
    
                    pcall(function()
                        game:GetService("ReplicatedStorage").Remotes.Server.Data.TakeQuest:InvokeServer(ohTable1)
                    end)
    
                    task.wait(1)
    
                    local questData = localPlayer:FindFirstChild("ReplicatedTempData") and localPlayer.ReplicatedTempData:FindFirstChild("quest")
                    if not questData then
                        pcall(function()
                            game:GetService("ReplicatedStorage").Remotes.Server.Data.TakeQuest:InvokeServer(ohTable1)
                        end)
                    end
    
                    local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
                    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                    local questMarker = localPlayer.PlayerGui:WaitForChild("QuestMarker")
                    local adornee = questMarker.Adornee
    
                    if adornee and adornee:IsA("BasePart") then
                        humanoidRootPart.CFrame = adornee.CFrame
                    end
    
                    task.wait(15)
                    check = false
                end
            end)
        else
            getgenv().AutoFarm1 = false
        end
    end,
    title = "Auto Quest [OP]"
})

local QuestToggle = FarmTab:Toggle({
    callback = function(bool)
        getgenv().AutoQuest_Arg1 = bool

        print("Auto Quest Mission Started;")

        pcall(function()
            if bool then
                AutoQuest() 
            end
        end)
    end,
    title = "Auto Accept Mission Quest"
})

local CollectSec = FarmTab:CreateSection("Collect Loots") 

local ToggleDrops = FarmTab:Toggle({
    callback = function(bool)
        getgenv().CollectDrops_Arg1 = bool

        print("Collect Drops Started;")
        while bool do
            task.wait()
            CollectDrops()
        end
    end,
    title = "Auto Collect Drops"
})


local ToggleChests = FarmTab:Toggle({
    callback = function(bool)
        getgenv().loot = bool
    end,
    title = "Auto Collect Chests"
})

game:GetService("RunService").Heartbeat:Connect(function()
    if getgenv().loot then
        checkLootAndChest()
    end
end)


local Button = MiscTab:Button({
    name = "Redeem All Codes",
    callback = function()  
        Redeem_Codes()
    end})

    local AdvantageSettings = MiscTab:CreateSection("Other") 

    
local GodModeToggle = MiscTab:Toggle({
        callback = function(Value)
            local skillName = "Infinity: Mugen"
            local skill = game:GetService("ReplicatedStorage").Skills:FindFirstChild(skillName)
        
            if skill then
                if Value then
                    currentCooldown = skill.Cooldown.Value
                    skill.Cooldown.Value = 0
                    getgenv().GodMode = true
                    while getgenv().GodMode do
                        local selectedSkill = game:GetService("ReplicatedStorage").Skills:FindFirstChild(skillName)
                        if selectedSkill then
                            game:GetService("ReplicatedStorage").Remotes.Server.Combat.Skill:FireServer(skillName)
                        end
                        task.wait(1)
                    end
                else
                    if currentCooldown then
                        skill.Cooldown.Value = currentCooldown
                    end
                    getgenv().GodMode = false
                end
            end
        end,
        title = "Godmode"
    })


local NoCdToggle = MiscTab:Toggle({
        callback = function(d)
            if d then
                for _, skill in pairs(skillsFolder:GetChildren()) do
                    if skill:IsA("Folder") and skill:FindFirstChild("Cooldown") then
                        local cooldownValue = skill.Cooldown
                        if cooldownValue:IsA("NumberValue") then
                            oldCooldown[skill.Name] = cooldownValue.Value
                            cooldownValue.Value = 0
                        end
                    end
                end
            else
                for skillName, oldValue in pairs(oldCooldown) do
                    local skill = skillsFolder:FindFirstChild(skillName)
                    if skill and skill:FindFirstChild("Cooldown") then
                        local cooldownValue = skill.Cooldown
                        if cooldownValue:IsA("NumberValue") then
                            cooldownValue.Value = oldValue
                        end
                    end
                end
            end
        end,
        title = "Skill no Cooldown"
    })

local InstantPromote = MiscTab:Toggle({
        callback = function(c)
            if c then
            getgenv().instantPromote = true
            task.spawn(function()
                while getgenv().instantPromote do
                    task.wait(0.1)
                    local ohString1 = "Clan Head Jujutsu High"
                    local ohString2 = "Promote"
                    
                    pcall(function()
                        game:GetService("ReplicatedStorage").Remotes.Server.Dialogue.GetResponse:InvokeServer(ohString1, ohString2)
                    end)
                end
            end)
        else
            getgenv().instantPromote = false
        end
    end,
        title = "Auto Promote"
    })

    local Damage = MiscTab:CreateSection("Damage") 

local slider = MiscTab:Slider({
        title = "Range",
        min = 10,
        max = 120, 
        default = 50,
        callback = function(v) 
            KillAura_Range = v
        end 
    })
    
local ToggleKillAura = MiscTab:Toggle({
        callback = function(bool)
            getgenv().KillAura_Arg1 = bool
    
            print("Insta Kill Started;")
            while bool do
                task.wait()
                killAura()
            end
        end,
        title = "Insta Kill Mobs (Risky on Bosses)"
    })
    
local ToggleM1 = MiscTab:Toggle({
        callback = function(bool)
            getgenv().M1_Stack_Arg1 = bool
            
            if bool then
                print("M1 Stack Started")
                task.spawn(M1_Stack)  
            else
                print("M1 Stack Stopped")
                getgenv().M1_Stack_Arg1 = false
            end
        end,
        title = "M1 Stack"
    })
    
local ToggleM1 = MiscTab:Toggle({
        callback = function(bool)
            getgenv().stackm1 = bool
    
            if getgenv().stackm1 then
                task.spawn(function()
                    local localPlayer = game.Players.LocalPlayer
                    local char_odaso = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
        
                    if not char_odaso then
                        return
                    end
        
                    while getgenv().stackm1 do
                        local mobs_gefunden = {}
        
                        for _, mob in ipairs(workspace.Objects.Mobs:GetChildren()) do
                            local humanoidRootPart = mob:FindFirstChild("HumanoidRootPart")
                            local humanoid = mob:FindFirstChild("Humanoid")
        
                            if humanoidRootPart and humanoid and calculateDist(char_odaso.CFrame, humanoidRootPart.CFrame) < 100 then
                                table.insert(mobs_gefunden, humanoid)
                            end
                        end
        
                        if #mobs_gefunden == 0 then
                            task.wait(0.5)
                        else
                            local args = { [1] = 5, [2] = mobs_gefunden }
                            local combatRemote = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Combat"):WaitForChild("M1")
                            
                            combatRemote:FireServer(unpack(args))
                            task.wait(0.2)
        
                            for _ = 1, hitStack do
                                combatRemote:FireServer(unpack(args))
                            end
                            task.wait(cooldownTime)
                        end
                    end
        
                end)
            end
        end,
        title = "M1 Stack 2"
    })

local SlotDropdown = SpinTab:Dropdown({
    title = "Select Slot",
    callback = function(v)
        print("Selected Slot: ", v)
        getgenv().SelectedSlot = v  
    end
})

SlotDropdown:Add("Slot1", "1")
SlotDropdown:Add("Slot2", "2")

local Dropdown = SpinTab:Dropdown({
    title = "Select Initiate",
    callback = function(v)
        print("Selected Initiate: ", v)
        getgenv().SelectedInitiate = v  
    end
})

Dropdown:Add("Infinity", "Infinity") -- // Special Grade
Dropdown:Add("Demon Vessel", "Demon Vessel") -- // Special Grade
Dropdown:Add("Soul Manipulation", "Soul Manipulation") -- // Special Grade
Dropdown:Add("Gambler Fever", "Gambler Fever") -- // Special Grade
Dropdown:Add("Curse Queen", "Curse Queen") -- // Special Grade
Dropdown:Add("Star Rage", "Star Rage") -- // Special Grade
Dropdown:Add("Hydrokinesis", "Hydrokinesis") -- // Legendary
Dropdown:Add("Volcano", "Volcano") -- // Legendary
Dropdown:Add("Judgeman", "Judgeman") -- // Legendary
Dropdown:Add("Ratio Technique", "Ratio Technique") -- // Rare
Dropdown:Add("Cursed Speech", "Cursed Speech") -- // Rare
Dropdown:Add("Straw Doll", "Straw Doll") -- // Rare
Dropdown:Add("Cryokinesis", "Cryokinesis") -- // Rare
Dropdown:Add("Blood Manipulation", "Blood Manipulation") -- // Rare
Dropdown:Add("Blazing Courage", "Blazing Courage") -- // Uncommon
Dropdown:Add("Boogie Woogie", "Boogie Woogie") -- // Uncommon
Dropdown:Add("Cloning Technique", "Cloning Technique") -- // Common
Dropdown:Add("Tool Manipulation", "Tool Manipulation") -- // Common
Dropdown:Add("Construction", "Construction") -- // Common

local Toggle = SpinTab:Toggle({
    callback = function(v)
        print("Auto Spin Toggle: ", v)
        getgenv().AutoSpinEnabled = v  
        if v then
            task.spawn(AutoSpin) 
        end
    end,
    title = "Auto Spin"
})

local ToggleLegendary = SpinTab:Toggle({
    callback = function(v)
        print("Stop on Legendary: ", v)
        getgenv().StopOnLegendary = v  
    end,
    title = "Stop on Legendary"
})

local ToggleSpecial = SpinTab:Toggle({
    callback = function(v)
        print("Stop on Special Grade: ", v)
        getgenv().StopOnSpecialGrade = v  
    end,
    title = "Stop on Special Grade"
})

function SpinSlot(slot)
    local args = {
        [1] = tonumber(slot)  
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Data"):WaitForChild("InnateSpin"):InvokeServer(unpack(args))
end

function AutoSpin()
    while getgenv().AutoSpinEnabled do
        task.wait(1.5)  

        if not getgenv().SelectedSlot or not getgenv().SelectedInitiate then
            print("Select Slot and Innitiate first;")
            return
        end

        SpinSlot(getgenv().SelectedSlot)

        if getgenv().StopOnLegendary or getgenv().StopOnSpecialGrade then
            local currentInitiate = game:GetService("Players").Candizadmiralfitinu.PlayerGui.Customization.Frame.Slots[getgenv().SelectedSlot].Text
            print("Current Initiate: ", currentInitiate)

            if getgenv().StopOnLegendary and table.find(LegendaryNames, currentInitiate) then
                print("Stopping on Legendary: ", currentInitiate)
                getgenv().AutoSpinEnabled = false  
            elseif getgenv().StopOnSpecialGrade and table.find(SpecialGradeNames, currentInitiate) then
                print("Stopping on Special Grade: ", currentInitiate)
                getgenv().AutoSpinEnabled = false  
            end
        end
    end
end

function RefreshLabels()
    pcall(function()
        InitiateLabel1:SetText("Initiate Slot 1: " .. (game:GetService("Players").LocalPlayer.ReplicatedData.innates["1"].Value or "N/A"))
        InitiateLabel2:SetText("Initiate Slot 2: " .. (game:GetService("Players").LocalPlayer.ReplicatedData.innates["2"].Value or "N/A"))
        InitiateLabel3:SetText("Initiate Slot 3: " .. (game:GetService("Players").LocalPlayer.ReplicatedData.innates["3"].Value or "N/A"))
        InitiateLabel4:SetText("Initiate Slot 4: " .. (game:GetService("Players").LocalPlayer.ReplicatedData.innates["4"].Value or "N/A"))
        CashLabel:SetText("Cash: " .. (game:GetService("Players").LocalPlayer.ReplicatedData.cash.Value or "N/A"))
        LevelLabel:SetText("Level: " .. (game:GetService("Players").LocalPlayer.ReplicatedData.level.Value or "N/A"))
        SpinsLabel:SetText("Spins Available: " .. (game:GetService("Players").LocalPlayer.ReplicatedData.spins.Value or "N/A"))
    end)
end
